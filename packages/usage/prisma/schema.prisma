generator custom_generator {
  provider = "node ../../node_modules/prisma-generator-zero"
  prettier = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  Typescript
  Javascript
  Rust
  Go
  Python
  Cpp
}

model User {
  id          Int            @id @default(autoincrement())
  email       String         @unique
  UserProfile UserProfile?
  Settings    UserSettings[]
  Manys       Many[]         @relation("UserToMany")
  Posts       Post[]
  Likes       Like[]         @relation("likePublisher")
  Liked       Like[]         @relation("liked")
  Comments    Comment[]
}

model Like {
  id          Int      @id @default(autoincrement())
  Publisher   User     @relation("likePublisher", fields: [publisherId], references: [id])
  publisherId Int
  LikedUser   User?    @relation("liked", fields: [userId], references: [id])
  userId      Int?
  Comment     Comment? @relation(fields: [commentId], references: [id])
  commentId   Int?
  Post        Post?    @relation(fields: [postId], references: [id])
  postId      Int?
}

model UserProfile {
  id        Int     @id @default(autoincrement())
  firstname String?
  lastname  String?
  avatar    String?
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique // relation scalar field (used in the `@relation` attribute above)
}

model UserSettings {
  id     Int  @id @default(autoincrement())
  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model Many {
  id     Int     @id @default(autoincrement())
  Users  User[]  @relation("UserToMany")
  Others Other[]
}

model Other {
  id    Int    @id @default(autoincrement())
  Manys Many[]
}

model Post {
  id          Int                 @id @default(autoincrement())
  title       String
  categories  CategoriesOnPosts[]
  Publisher   User                @relation(fields: [publisherId], references: [id])
  publisherId Int
  Comments    Comment[]
  Likes       Like[]
  Tags        Tag[]
  Labels      Label[]             @relation("Post_to_Label")
}

// explicit many to many
model Category {
  id    Int                 @id @default(autoincrement())
  name  String
  posts CategoriesOnPosts[]
}

model CategoriesOnPosts {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([postId, categoryId])
}

// impicit many to many without @relation
model Tag {
  id    Int    @id @default(autoincrement())
  Posts Post[]
}

// impicit many to many without @relation 
// This will change the name of the table on prisma push
model Label {
  id    Int    @id @default(autoincrement())
  Posts Post[] @relation("Post_to_Label")
}

model Comment {
  id        Int    @id @default(autoincrement())
  Post      Post   @relation(fields: [postId], references: [id])
  postId    Int
  Publisher User   @relation(fields: [userId], references: [id])
  Like      Like[]
  userId    Int
}
