// Generated by Zero Schema Generator
import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from '@rocicorp/zero'

// Define enums
export enum Language {
  Typescript = 'Typescript',
  Javascript = 'Javascript',
  Rust = 'Rust',
  Go = 'Go',
  Python = 'Python',
  Cpp = 'Cpp',
}

// Define tables
export const userTable = table('User')
  .columns({
    id: number(),
    email: string(),
    createdAt: number().optional(),
    updatedAt: number().optional(),
  })
  .primaryKey('id')

export const userProfileTable = table('UserProfile')
  .columns({
    id: number(),
    firstname: string().optional(),
    lastname: string().optional(),
    avatar: string().optional(),
    details: json().optional(),
    prefferdLanguage: enumeration<Language>().optional(),
    isHuman: boolean().optional(),
    userId: number(),
    createdAt: number().optional(),
    updatedAt: number().optional(),
  })
  .primaryKey('id')

export const userSettingsTable = table('UserSettings')
  .columns({
    id: number(),
    userId: number(),
  })
  .primaryKey('id')

export const manyTable = table('Many')
  .columns({
    id: number(),
  })
  .primaryKey('id')

export const otherTable = table('Other')
  .columns({
    id: number(),
  })
  .primaryKey('id')

export const postTable = table('Post')
  .columns({
    id: number(),
    title: string(),
    publisherId: number(),
    createdAt: number().optional(),
    updatedAt: number().optional(),
  })
  .primaryKey('id')

export const categoryTable = table('Category')
  .columns({
    id: number(),
    name: string(),
  })
  .primaryKey('id')

export const categoriesOnPostsTable = table('CategoriesOnPosts')
  .columns({
    postId: number(),
    categoryId: number(),
    assignedAt: number(),
    assignedBy: string(),
  })
  .primaryKey('postId', 'categoryId')

export const tagTable = table('Tag')
  .columns({
    id: number(),
  })
  .primaryKey('id')

export const labelTable = table('Label')
  .columns({
    id: number(),
  })
  .primaryKey('id')

export const commentTable = table('Comment')
  .columns({
    id: number(),
    postId: number(),
    userId: number(),
    createdAt: number().optional(),
    updatedAt: number().optional(),
  })
  .primaryKey('id')

export const likeTable = table('Like')
  .columns({
    id: number(),
    publisherId: number(),
    userId: number().optional(),
    commentId: number().optional(),
    postId: number().optional(),
    createdAt: number().optional(),
  })
  .primaryKey('id')

export const _UserToMany = table('_UserToMany')
  .columns({
    A: string(),
    B: string(),
  })
  .primaryKey('A', 'B')

export const _ManyToOther = table('_ManyToOther')
  .columns({
    A: string(),
    B: string(),
  })
  .primaryKey('A', 'B')

export const _PostToTag = table('_PostToTag')
  .columns({
    A: string(),
    B: string(),
  })
  .primaryKey('A', 'B')

export const _Post_to_Label = table('_Post_to_Label')
  .columns({
    A: string(),
    B: string(),
  })
  .primaryKey('A', 'B')

// Define relationships
export const userTableRelationships = relationships(
  userTable,
  ({ one, many }) => ({
    UserProfile: one({
      sourceField: ['id'],
      destField: ['userId'],
      destSchema: userProfileTable,
    }),
    Settings: many({
      sourceField: ['id'],
      destField: ['userId'],
      destSchema: userSettingsTable,
    }),
    Posts: many({
      sourceField: ['id'],
      destField: ['publisherId'],
      destSchema: postTable,
    }),
    Likes: many({
      sourceField: ['id'],
      destField: ['publisherId'],
      destSchema: likeTable,
    }),
    Liked: many({
      sourceField: ['id'],
      destField: ['userId'],
      destSchema: likeTable,
    }),
    Comments: many({
      sourceField: ['id'],
      destField: ['userId'],
      destSchema: commentTable,
    }),
    Manys: many(
      {
        sourceField: ['id'],
        destField: ['B'],
        destSchema: _UserToMany,
      },
      {
        sourceField: ['A'],
        destField: ['id'],
        destSchema: manyTable,
      },
    ),
  }),
)

export const userProfileTableRelationships = relationships(
  userProfileTable,
  ({ one }) => ({
    user: one({
      sourceField: ['userId'],
      destField: ['id'],
      destSchema: userTable,
    }),
  }),
)

export const userSettingsTableRelationships = relationships(
  userSettingsTable,
  ({ one }) => ({
    User: one({
      sourceField: ['userId'],
      destField: ['id'],
      destSchema: userTable,
    }),
  }),
)

export const manyTableRelationships = relationships(manyTable, ({ many }) => ({
  Users: many(
    {
      sourceField: ['id'],
      destField: ['A'],
      destSchema: _UserToMany,
    },
    {
      sourceField: ['B'],
      destField: ['id'],
      destSchema: userTable,
    },
  ),
  Others: many(
    {
      sourceField: ['id'],
      destField: ['B'],
      destSchema: _ManyToOther,
    },
    {
      sourceField: ['A'],
      destField: ['id'],
      destSchema: otherTable,
    },
  ),
}))

export const otherTableRelationships = relationships(
  otherTable,
  ({ many }) => ({
    Manys: many(
      {
        sourceField: ['id'],
        destField: ['A'],
        destSchema: _ManyToOther,
      },
      {
        sourceField: ['B'],
        destField: ['id'],
        destSchema: manyTable,
      },
    ),
  }),
)

export const postTableRelationships = relationships(
  postTable,
  ({ one, many }) => ({
    categories: many({
      sourceField: ['id'],
      destField: ['postId'],
      destSchema: categoriesOnPostsTable,
    }),
    Publisher: one({
      sourceField: ['publisherId'],
      destField: ['id'],
      destSchema: userTable,
    }),
    Comments: many({
      sourceField: ['id'],
      destField: ['postId'],
      destSchema: commentTable,
    }),
    Likes: many({
      sourceField: ['id'],
      destField: ['postId'],
      destSchema: likeTable,
    }),
    Tags: many(
      {
        sourceField: ['id'],
        destField: ['B'],
        destSchema: _PostToTag,
      },
      {
        sourceField: ['A'],
        destField: ['id'],
        destSchema: tagTable,
      },
    ),
    Labels: many(
      {
        sourceField: ['id'],
        destField: ['A'],
        destSchema: _Post_to_Label,
      },
      {
        sourceField: ['B'],
        destField: ['id'],
        destSchema: labelTable,
      },
    ),
  }),
)

export const categoryTableRelationships = relationships(
  categoryTable,
  ({ many }) => ({
    posts: many({
      sourceField: ['id'],
      destField: ['categoryId'],
      destSchema: categoriesOnPostsTable,
    }),
  }),
)

export const categoriesOnPostsTableRelationships = relationships(
  categoriesOnPostsTable,
  ({ one }) => ({
    post: one({
      sourceField: ['postId'],
      destField: ['id'],
      destSchema: postTable,
    }),
    category: one({
      sourceField: ['categoryId'],
      destField: ['id'],
      destSchema: categoryTable,
    }),
  }),
)

export const tagTableRelationships = relationships(tagTable, ({ many }) => ({
  Posts: many(
    {
      sourceField: ['id'],
      destField: ['A'],
      destSchema: _PostToTag,
    },
    {
      sourceField: ['B'],
      destField: ['id'],
      destSchema: postTable,
    },
  ),
}))

export const labelTableRelationships = relationships(
  labelTable,
  ({ many }) => ({
    Posts: many(
      {
        sourceField: ['id'],
        destField: ['A'],
        destSchema: _Post_to_Label,
      },
      {
        sourceField: ['B'],
        destField: ['id'],
        destSchema: postTable,
      },
    ),
  }),
)

export const commentTableRelationships = relationships(
  commentTable,
  ({ one, many }) => ({
    Post: one({
      sourceField: ['postId'],
      destField: ['id'],
      destSchema: postTable,
    }),
    Publisher: one({
      sourceField: ['userId'],
      destField: ['id'],
      destSchema: userTable,
    }),
    Like: many({
      sourceField: ['id'],
      destField: ['commentId'],
      destSchema: likeTable,
    }),
  }),
)

export const likeTableRelationships = relationships(likeTable, ({ one }) => ({
  Publisher: one({
    sourceField: ['publisherId'],
    destField: ['id'],
    destSchema: userTable,
  }),
  LikedUser: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: userTable,
  }),
  Comment: one({
    sourceField: ['commentId'],
    destField: ['id'],
    destSchema: commentTable,
  }),
  Post: one({
    sourceField: ['postId'],
    destField: ['id'],
    destSchema: postTable,
  }),
}))

// Define schema
export const schema = createSchema(9, {
  tables: [
    _UserToMany,
    _ManyToOther,
    _PostToTag,
    _Post_to_Label,
    userTable,
    userProfileTable,
    userSettingsTable,
    manyTable,
    otherTable,
    postTable,
    categoryTable,
    categoriesOnPostsTable,
    tagTable,
    labelTable,
    commentTable,
    likeTable,
  ],
  relationships: [
    userTableRelationships,
    userProfileTableRelationships,
    userSettingsTableRelationships,
    manyTableRelationships,
    otherTableRelationships,
    postTableRelationships,
    categoryTableRelationships,
    categoriesOnPostsTableRelationships,
    tagTableRelationships,
    labelTableRelationships,
    commentTableRelationships,
    likeTableRelationships,
  ],
})

// Define types
export type Schema = typeof schema
export type User = Row<typeof schema.tables.User>
export type UserProfile = Row<typeof schema.tables.UserProfile>
export type UserSettings = Row<typeof schema.tables.UserSettings>
export type Many = Row<typeof schema.tables.Many>
export type Other = Row<typeof schema.tables.Other>
export type Post = Row<typeof schema.tables.Post>
export type Category = Row<typeof schema.tables.Category>
export type CategoriesOnPosts = Row<typeof schema.tables.CategoriesOnPosts>
export type Tag = Row<typeof schema.tables.Tag>
export type Label = Row<typeof schema.tables.Label>
export type Comment = Row<typeof schema.tables.Comment>
export type Like = Row<typeof schema.tables.Like>

// DO NOT TOUCH THIS. The schema hash is used to determine if the schema has changed and correctly update the version.
// Schema hash: 4e6f0579d39b9c7ad9c986d5bd67a1e62f9c6a891bfb85003cf2b63419da1fe9
